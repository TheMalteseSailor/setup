 _    ______  _____                      
| |  / / __ \/ ___/                      
| | / / /_/ /\__ \                       
| |/ / ____/___/ /                       
|___/_/____/____/__________  ______      
      / ___// ____/_  __/ / / / __ \     
      \__ \/ __/   / / / / / / /_/ /     
     ___/ / /___  / / / /_/ / ____/      
    /____/_____/_/_/_ \____/_/___  ______
            / ____/ / / /  _/ __ \/ ____/
           / / __/ / / // // / / / __/   
          / /_/ / /_/ // // /_/ / /___   
          \____/\____/___/_____/_____/   
                                         

// For Internal Testings

--- Server ---
    Hostname: Pivot
    OS: Ubuntu 20.04.4 LTS (Cloud)
    IP: 192.128.1.114 (Internal DHCP)
    OVPN IP: 10.8.0.1

--- Client ----
    Hostname: Linux
    OS: Kali - 5.15.0 (01-31-2022)
    IP: 192.168.1.123 (Internal DHCP)
    OVPN IP: 10.8.0.2


// Prep work:
==== Server Setup ====
    - Download Ubuntu Server
    -- https://ubuntu.com/download/server
    --- Select "Option 2 - Manual server Installation
    ---- Select the green button labeled "Download Ubuntu Server 20.04.4 LTS"

    - Using your preference for hypervisor create a VM
    -- Give it 2 cores, 512MB-1GB of RAM, and whatever for HDD/SSD.
    --- Install the OS
    ---- ensure you're getting an IP address from the DHCP server ("ip a")

==== Client Setup ====
    - Download Kali Linux
    -- https://www.kali.org/get-kali/
    --- Select the button that is labled "Bare Metal"
    ---- Scroll down to where you see a blue kali disk that is labled "Installer"
    ----- Click the icon that looks like an arrow pointing down to a flat horizontal line.

    - Using your preference for hypervisor create a VM
    -- Give it at least 4 cores, and 2GB of RAM preferably 4+ GB, and 250 GB or dynamically provisioned HDD/SSD space.
    --- Install the OS
    ---- ensure you're getting an IP address from the DHCP server ("ip a")



NOTE: Comments will start with "//" and labels "-". If the line just has text it's likely a terminal command.


   ____                 _    ______  _   __   ____           __  _ ____      __  _           
  / __ \____  ___  ____| |  / / __ \/ | / /  /  _/___  _____/ /_(_) / /___ _/ /_(_)___  ____ 
 / / / / __ \/ _ \/ __ \ | / / /_/ /  |/ /   / // __ \/ ___/ __/ / / / __ `/ __/ / __ \/ __ \
/ /_/ / /_/ /  __/ / / / |/ / ____/ /|  /  _/ // / / (__  ) /_/ / / / /_/ / /_/ / /_/ / / / /
\____/ .___/\___/_/ /_/|___/_/   /_/ |_/  /___/_/ /_/____/\__/_/_/_/\__,_/\__/_/\____/_/ /_/ 
    /_/                                                                                      
    
    
--- Server ---
    // At this point stay in the VM's interface and not SSH.
    wget https://git.io/vpn -O openvpn-install.sh
        // If this site is no longer available you can pull it from my repo.
    chmod +x openvpn-install.sh
    sudo ./openvpn-install.sh
        // !!! Make sure you change the IP it gives to use with the internal 192.x.x.x DCHP
        //  address or it will generate a config that will have your client attempting to 
        //  connect to your public IP/IP it presents. 
        // !!! Make sure you annotate or leave the screen on where it dropped your 
        //   Client's config. It may be called something else based on the client name you 
        //   indicated.
    sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
    sudo vim /etc/ssh/sshd_config
        uncomment GatewayPorts and change to 'yes'
        // To search in VIM hit 'esc' and type '/' plus what you're searching for.
        // Here you'd type '/GatewayPorts'. Make sure you hit enter instead of esc or 
        //   it will jump you back to you current position.
    sudo systemctl restart ssh
        // If you were in an SSH session this wouldn't fully work. 
        // That's why I had you stay in the VM's terminal interface.
        

--- Client ---
    sudo apt install openvpn
    sudo vim /etc/ssh/sshd_config
        uncomment GatewayPorts and change to 'yes'
        // To search in VIM hit 'esc' and type '/' plus what you're searching for.
        // Here you'd type '/GatewayPorts'. Make sure you hit enter instead of esc or 
        //   it will jump you back to you current position.
    sudo systemctl restart ssh

    // If you can't get a python webserver listening or scp you can cat the client's config
    //  on the server and copy it from the ssh terminal and paste it into a document on the
    //  Client VM.
    ex. 
        - Sever -
        ssh <user>@<ServerIP>
        sudo cat <ClientName>.ovpn
        // "ClientName" can be whatever you made it.
        - Client -
        sudo vim /etc/openvpn/client/<ClientName>.ovpn
        // hit 'a' to enter insert mode, then center click or right click and paste
        // to save and exit, hit escape a few time and type 'wq' for write & quit.

    ================================
    ===== openvpn connect line =====
    sudo openvpn --config /etc/openvpn/client/<ClientName>.ovpn
    ================================
    // checking for tun0 interface and 10.8.0.2 address
    ip a


   __________ __  __   __ __              _____      __            
  / ___/ ___// / / /  / //_/__  __  __   / ___/___  / /___  ______ 
  \__ \\__ \/ /_/ /  / ,< / _ \/ / / /   \__ \/ _ \/ __/ / / / __ \
 ___/ /__/ / __  /  / /| /  __/ /_/ /   ___/ /  __/ /_/ /_/ / /_/ /
/____/____/_/ /_/  /_/ |_\___/\__, /   /____/\___/\__/\__,_/ .___/ 
                             /____/                       /_/      
                             
// Using a VPS provider will likely require you to download their default key setup to you local station.
// Since that's not a thing here you'll have to make your own keys.
// !!! This section is not nessisary if you're just using a local system that allows SSH login via 
//   username and password.

--- Client ---
    // https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-20-04
    // If you have already configured keys make sure you read the link above.
    ssh-keygen
    // type a password
    ssh-copy-id <user>@10.8.0.1
    // give ssh password for Server
    ssh <user>@10.8.0.1
    // it asks for key password
    // OR
    ssh -i /<PATH>/<key>.pem <user>@10.8.0.1




   __________ __  __   ____                                   ______                       ___            
  / ___/ ___// / / /  / __ \___ _   _____  _____________     /_  __/_  ______  ____  ___  / (_)___  ____ _
  \__ \\__ \/ /_/ /  / /_/ / _ \ | / / _ \/ ___/ ___/ _ \     / / / / / / __ \/ __ \/ _ \/ / / __ \/ __ `/
 ___/ /__/ / __  /  / _, _/  __/ |/ /  __/ /  (__  )  __/    / / / /_/ / / / / / / /  __/ / / / / / /_/ / 
/____/____/_/ /_/  /_/ |_|\___/|___/\___/_/  /____/\___/    /_/  \__,_/_/ /_/_/ /_/\___/_/_/_/ /_/\__, /  
                                                                                                 /____/   
                                                                                                 
// For obvious reasons you should always keep a control session on a system you're actively using.
    ssh -i <key>.pem <user>@10.8.0.1
// if you've set SSH to listen on a different port the arg option is '-p' ex. '-p 5050'
    sudo su
    ~C
         // Typing this should have you holding "SHIFT" down...
         // As you're typing this nothing should show up. if something is priting to screan just delete the text and
         //   and hit enter a few times and try again.
         // This will drop you into a SSH session control prompt.
         //   To exit it just hit enter.
    -R 0.0.0.0:8000:10.8.0.2:8000
        // -R <VPS_IP>:<VPS_List_Port>:<Local_Client_IP>:<Local_Client_List_Port>
        // This is an example of a straight through reverse tunnel.
        // rememeber that 10.8.0.1 is the VPS IP and 10.8.0.2 is your local VM's IP
    
// To test the functionality of the tunnel
- Client - 
    python3 -m http.server 8000
- Server - 
// while SSH'd on 
    ~C 
    -R 0.0.0.0:8000:10.8.0.2:8000
    // hit <Enter> <Enter>
// From your host browse to the 192... IP of the Server VM. If you are presented with the directory your
//  python webserver is listening and you see the terminal that spawned the webserver print the request
//  your line and setup works.
    



   _____ __  ______  __________           
  / ___// / / / __ \/ ____/ __ \          
  \__ \/ / / / /_/ / __/ / /_/ /          
 ___/ / /_/ / ____/ /___/ _, _/           
/____/\____/_/   /_____/_/ |_|            
         ________  __________________     
        / ____/ / / / ____/ ____/  _/     
       / / __/ / / / /   / /    / /       
      / /_/ / /_/ / /___/ /____/ /        
      \____/\____/\____/\____/___/        
             _____ ______________  ______ 
            / ___// ____/_  __/ / / / __ \
            \__ \/ __/   / / / / / / /_/ /
           ___/ / /___  / / / /_/ / ____/ 
          /____/_____/ /_/  \____/_/      
                                          
